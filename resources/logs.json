{"data": [{"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "score": 65, "toggle": true}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (primitiveType int)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "score": 73, "toggle": true}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (primitiveType int)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "score": 78, "toggle": false}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "score": 75, "toggle": false}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId EmployeeNumber)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSalary)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSalary)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary EmployeeNumber)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSalary)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSalary)) = (expression (expression (primary basicSalary)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary EmployeeNumber)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSalary)))) ))) ;)) }))))) }))) <EOF>)", "score": 78, "toggle": false}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) <missing '}'>))) <EOF>)", "score": 79, "toggle": false}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) <missing '}'>))) <EOF>)", "score": 70, "toggle": true}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . four) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class Grades (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId name)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType float)) (variableDeclarators (variableDeclarator (variableDeclaratorId avg)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId grade)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter your name : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary name)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter your Average : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary avg)) = (expression (expression (primary s)) . (methodCall nextFloat ( )))) ;)) (blockStatement (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 80))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Distinction\")))) ;)) })) else (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 70))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Credit\")))) ;)) })) else (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 60))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Simple Pass\")))) ;)) })) else (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Fail\")))) ;)) })))))) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary name)) + (expression (primary (literal \" \")))) + (expression (primary grade)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) <missing '}'>))) <EOF>)", "score": 67, "toggle": true}, {"lecturer_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . four) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class Grades (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId name)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType float)) (variableDeclarators (variableDeclarator (variableDeclaratorId avg)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId grade)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter your name : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary name)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter your Average : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary avg)) = (expression (expression (primary s)) . (methodCall nextFloat ( )))) ;)) (blockStatement (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 80))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Distinction\")))) ;)) })) else (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 70))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Credit\")))) ;)) })) else (statement if (parExpression ( (expression (expression (primary avg)) > (expression (primary (literal (integerLiteral 60))))) )) (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Simple Pass\")))) ;)) })) else (statement (block { (blockStatement (statement (expression (expression (primary grade)) = (expression (primary (literal \"Fail\")))) ;)) })))))) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary name)) + (expression (primary (literal \" \")))) + (expression (primary grade)))) ))) ;)) }))))) }))) <EOF>)", "student_ast": "(compilationUnit (packageDeclaration package (qualifiedName question . one) ;) (importDeclaration import (qualifiedName java . util . Scanner) ;) (typeDeclaration (classOrInterfaceModifier public) (classDeclaration class BasicSalary (classBody { (classBodyDeclaration (modifier (classOrInterfaceModifier public)) (modifier (classOrInterfaceModifier static)) (memberDeclaration (methodDeclaration (typeTypeOrVoid void) main (formalParameters ( (formalParameterList (formalParameter (typeType (classOrInterfaceType String) [ ]) (variableDeclaratorId args))) )) (methodBody (block { (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType String)) (variableDeclarators (variableDeclarator (variableDeclaratorId empno)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId basicSal)))) ;) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId netSal)))) ;) (blockStatement (localVariableDeclaration (typeType (classOrInterfaceType Scanner)) (variableDeclarators (variableDeclarator (variableDeclaratorId s) = (variableInitializer (expression new (creator (createdName Scanner) (classCreatorRest (arguments ( (expressionList (expression (expression (primary System)) . in)) ))))))))) ;) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Employee Number : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary empno)) = (expression (expression (primary s)) . (methodCall nextLine ( )))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (primary (literal \"Enter Basic Salary : \")))) ))) ;)) (blockStatement (statement (expression (expression (primary basicSal)) = (expression (expression (primary s)) . (methodCall nextDouble ( )))) ;)) (blockStatement (localVariableDeclaration (typeType (primitiveType double)) (variableDeclarators (variableDeclarator (variableDeclaratorId salAdd) = (variableInitializer (expression (expression (primary (literal (floatLiteral 110.00)))) / (expression (primary (literal (floatLiteral 100.00))))))))) ;) (blockStatement (statement (expression (expression (primary netSal)) = (expression (expression (primary basicSal)) * (expression (primary salAdd)))) ;)) (blockStatement (statement (expression (expression (expression (primary System)) . out) . (methodCall println ( (expressionList (expression (expression (expression (primary empno)) + (expression (primary (literal \" Your Net Salary is Rs : \")))) + (expression (primary netSal)))) ))) ;)) }))))) <missing '}'>))) <EOF>)", "score": 79, "toggle": false}]}